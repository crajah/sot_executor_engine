{
  "in": {
    "type": "PubSub",
    "serialization": "Avro",
    "name": "MessageExtended",
    "topic": "p2pout",
    "schema": {
      "type": "record",
      "name": "MessageExtended",
      "namespace": "parallelai.sot.avro",
      "fields": [
        {
          "name": "user",
          "type": "string",
          "doc": "Name of the user"
        },
        {
          "name": "teamName",
          "type": "string",
          "doc": "Name of the team"
        },
        {
          "name": "score",
          "type": "int",
          "doc": "User score"
        },
        {
          "name": "eventTime",
          "type": "long",
          "doc": "time when event created"
        },
        {
          "name": "eventTimeStr",
          "type": "string",
          "doc": "event time string for debugging"
        },
        {
          "name": "count",
          "type": "int",
          "doc": "example count"
        }
      ],
      "doc": "A basic schema for storing user records"
    }
  },
  "out": {
    "type": "BigQuery",
    "name": "BigQueryRow",
    "dataset": "bigquerytest",
    "table": "streaming_word_extract26",
    "schema": {
      "fields": [
        {
          "mode": "REQUIRED",
          "name": "user",
          "type": "STRING"
        },
        {
          "mode": "REQUIRED",
          "name": "total_score",
          "type": "INTEGER"
        },
        {
          "mode": "REQUIRED",
          "name": "processing_time",
          "type": "STRING"
        }
      ]
    }
  },
  "steps": [
    {
      "type": "transformation",
      "name": "mapper1",
      "op": "map",
      "func": "m => (m.teamName, m.score.toInt)"
    },
    {
      "type": "transformation",
      "name": "filter",
      "op": "filter",
      "func": "m => m.score > 2"
    },
    {
      "type": "transformation",
      "name": "mapper2",
      "op": "map",
      "func": "m => BigQueryRow(m._1, m._2, Helper.fmt.print(Instant.now()))"
    },
    {
      "type": "transformation",
      "name": "sumByKey",
      "op": "sumByKey",
      "func": ""
    }
  ],
  "dag": "filter -> mapper1 -> sumByKey -> mapper2"
}