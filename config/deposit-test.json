{
  "id": "schemaname",
  "name": "schemaname",
  "version": "version1",
  "schemas": [
    {
      "type": "avro",
      "id": "avroschema1",
      "name": "avroschema1",
      "version": "version2",
      "definition": {
        "name": "Features",
        "doc": "A basic schema for storing user records",
        "fields": [
          {
            "name": "userId",
            "type": "string"
          },
          {
            "name": "depositAmount",
            "type": "float"
          },
          {
            "name": "depositTime",
            "type": "long",
            "doc": "time when event created"
          },
          {
            "name": "depositTimeStr",
            "type": "string",
            "doc": "event time string for debugging"
          }
        ],
        "type": "record",
        "namespace": "parallelai.sot.avro"
      }
    }
  ],
  "taps": [
    {
      "type": "pubsub",
      "id": "pubsubsource1",
      "topic": "depositpoc"
    },
    {
      "type": "bigquery",
      "id": "bigquerysource1",
      "dataset": "bigquerytest",
      "table": "deposits18",
      "createDisposition": "CREATE_IF_NEEDED",
      "writeDisposition": "WRITE_APPEND"
    }
  ],
  "steps": [
    {
      "type": "source",
      "id": "in",
      "name": "in",
      "schema": "avroschema1",
      "source": "pubsubsource1"
    },
    {
      "type": "transformation",
      "id": "window1",
      "name": "window1",
      "op": "withFixedWindows",
      "params": [
        [
          "Duration.millis(100)",
          "Duration.millis(0)",
          "WindowOptions(trigger =  Repeatedly.forever(AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.standardSeconds(30))), accumulationMode = AccumulationMode.ACCUMULATING_FIRED_PANES, allowedLateness =  Duration.standardMinutes(args.int(\"allowedLateness\", 120)))"
        ]
      ],
      "paramsEncoded": false
    },
    {
      "type": "transformation",
      "id": "mapper1",
      "name": "mapper1",
      "op": "accumulator",
      "params": [
        [
          "m => m.project(projector(Col('depositAmount))).append('depositCount, 1)"
        ],
        [
          "m => m.get('userId)",
          "(oldvalue, newvalue) => Row('depositAmount ->> (oldvalue.getOrElse(Row('depositAmount ->> 0.0f :: 'depositCount ->> 0 :: HNil)).get('depositAmount) + newvalue.get('depositAmount)) :: 'depositCount ->> (oldvalue.getOrElse(Row('depositAmount ->> 0.0f :: 'depositCount ->> 0 :: HNil)).get('depositCount) + newvalue.get('depositCount)) :: HNil)",
          "(row, state) => row.append('counter, state.get('depositAmount)).append('counter2, state.get('depositCount)).append('ts, Helper.fmt.print(Helper.Instant.now()))",
          "\"test4\""
        ]
      ],
      "paramsEncoded": false
    },
    {
      "type": "sink",
      "id": "out",
      "name": "out",
      "source": "bigquerysource1"
    }
  ],
  "dag": [
    {
      "from": "in",
      "to": "mapper1"
    },
    {
      "from": "mapper1",
      "to": "out"
    }
  ]
}