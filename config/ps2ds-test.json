{
  "name": "schemaname",
  "version": "version1",
  "schemas": [
    {
      "type": "avro",
      "id": "avroschema1",
      "version": "version2",
      "definition": {
        "type": "record",
        "name": "Message",
        "namespace": "parallelai.sot.avro",
        "fields": [
          {
            "name": "user",
            "type": "string",
            "doc": "Name of the user"
          },
          {
            "name": "teamName",
            "type": "string",
            "doc": "Name of the team"
          },
          {
            "name": "score",
            "type": "int",
            "doc": "User score"
          },
          {
            "name": "eventTime",
            "type": "long",
            "doc": "time when event created"
          },
          {
            "name": "eventTimeStr",
            "type": "string",
            "doc": "event time string for debugging"
          }
        ],
        "doc": "A basic schema for storing user records"
      }
    }
  ],
  "taps": [
    {
      "type": "pubsub",
      "id": "pubsubsource1",
      "topic": "p2pds"
    },
    {
      "type": "datastore",
      "id": "datastoresource1",
      "kind": "dataflowwrite"
    }
  ],
  "steps": [
    {
      "type": "source",
      "name": "in",
      "schema": "avroschema1",
      "source": "pubsubsource1"
    },
    {
      "type": "transformation",
      "name": "mapper1",
      "op": "map",
      "func": "m => {val updated = m.append('id, Helper.random.nextInt());updated.project(projector(Col('id), Col('user), Col('score) ** Col('score1), Col('score) ** Col('score2), Col('eventTime)))}"
    },
    {
      "type": "transformation",
      "name": "filter",
      "op": "filter",
      "func": "m => m.get('score1) > 1"
    },
    {
      "type": "sink",
      "name": "out",
      "source": "datastoresource1"
    }
  ],
  "dag": [
    {
      "from": "in",
      "to": "mapper1"
    },
    {
      "from": "mapper1",
      "to": "filter"
    },
    {
      "from": "filter",
      "to": "out"
    }
  ]
}