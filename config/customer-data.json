{
  "id": "schemaname",
  "name": "schemaname",
  "version": "version1",
  "schemas": [
    {
      "type": "json",
      "id": "jsonschema1",
      "name": "jsonschema1Name",
      "version": "version1",
      "definition": {
        "type": "jsondefinition",
        "name": "Customer",
        "fields": [
          {
            "name": "userName",
            "type": "String"
          },
          {
            "name": "userId",
            "type": "Long"
          },
          {
            "name": "score",
            "type": "Float"
          },
          {
            "name": "eventTime",
            "type": "Long"
          }
        ]
      }
    }
  ],
  "taps": [
    {
      "type": "pubsub",
      "id": "pubsubsource1",
      "topic": "jsontest"
    },
    {
      "type": "datastore",
      "id": "datastoresource1",
      "kind": "dataflowwrite1"
    }
  ],
  "steps": [
    {
      "type": "source",
      "id": "in",
      "name": "in",
      "schema": "jsonschema1",
      "source": "pubsubsource1"
    },
    {
      "type": "transformation",
      "id": "mapper1",
      "name": "mapper1",
      "op": "map",
      "params": [["m => {val updated = m.append('id, Helper.random.nextInt());updated.project(projector(Col('id), Col('userName), Col('userId), Col('score), Col('eventTime)))}"]],
      "paramsEncoded": false
    },
    {
      "type": "transformation",
      "id": "filter",
      "name": "filter",
      "op": "filter",
      "params": [["m => m.get('score) > 1.0"]],
      "paramsEncoded": false
    },
    {
      "type": "sink",
      "id": "out",
      "name": "out",
      "source": "datastoresource1"
    }
  ],
  "dag": [
    {
      "from": "in",
      "to": "mapper1"
    },
    {
      "from": "mapper1",
      "to": "filter"
    },
    {
      "from": "filter",
      "to": "out"
    }
  ]
}