{
  "id": "schemaname",
  "name": "schemaname",
  "version": "version1",
  "schemas": [
    {
      "type": "protobuf",
      "id": "protoschema1",
      "name": "protoschema1",
      "version": "version2",
      "definition": {
        "type": "protobufdefinition",
        "name": "Activity",
        "schemaBase64": "cGFja2FnZSBjb3JlOw0KDQpvcHRpb24gamF2YV9wYWNrYWdlID0gImNvbS5vcGVuYmV0LnBsYXRmb3JtLmFjdGl2aXR5ZmVlZHMubW9kZWwuY29yZSI7DQpvcHRpb24gamF2YV9vdXRlcl9jbGFzc25hbWUgPSAiQ29yZU1vZGVsIjsNCg0KLy9BIGNsYXNzIGZvciBob2xkaW5nIGJhdGNoZXMgb2YgYWN0aXZpdHkgbWVzc2FnZXMuIEluIGFkZGl0aW9uLA0KLy9pdCBoYXMgbW9uaXRvcmluZyBjYXBhYmlsaXRpZXMgdGhhbmtzIHRvIHRoZSBlbWJlZGRlZCBtb25pdG9yaW5nDQovL29iamVjdC4NCm1lc3NhZ2UgQmF0Y2ggew0KICByZXF1aXJlZCBzdHJpbmcgdW5pcXVlSWQgPSAxOw0KICByZXBlYXRlZCBBY3Rpdml0eSBtZXNzYWdlcyA9IDI7DQogIG9wdGlvbmFsIE1vbml0b3JpbmcgbW9uaXRvcmluZyA9IDM7DQp9DQoNCg0KbWVzc2FnZSBBY3Rpdml0eSB7DQoNCiAgbWVzc2FnZSBBY3Rpdml0eUhlYWRlciB7DQoNCiAgICByZXF1aXJlZCBpbnQ2NCBhY3Rpdml0eUlkID0gMTsNCiAgICBvcHRpb25hbCBpbnQ2NCB0aW1lU3RhbXAgPSAyOw0KICAgIG9wdGlvbmFsIENydWRUeXBlIGNydWRUeXBlID0gMzsNCiAgICBvcHRpb25hbCBTZXF1ZW5jaW5nS2V5IHNlcXVlbmNpbmdLZXkgPSA0Ow0KICAgIG9wdGlvbmFsIGludDY0IHF1ZXVlSWQgPSA1Ow0KICAgIG9wdGlvbmFsIGJ5dGVzIHBheWxvYWQgPSA2Ow0KICAgIG9wdGlvbmFsIHN0cmluZyB1bmlxdWVJZCA9IDc7DQogICAgb3B0aW9uYWwgQWN0aXZpdHlEZXNjcmlwdG9yIGFjdGl2aXR5RGVzY3JpcHRvciA9IDg7DQogICAgb3B0aW9uYWwgaW50NjQgZmlyc3RTZW50VGltZSA9IDk7DQogICAgb3B0aW9uYWwgaW50MzIgc2VuZFJldHJpZXMgPSAxMDsNCg0KICAgIG9wdGlvbmFsIHN0cmluZyBjb250ZXh0UmVmID0gMTE7DQogICAgb3B0aW9uYWwgc3RyaW5nIHB1Ymxpc2hlclJlZiA9IDEyOw0KICAgIG9wdGlvbmFsIHN0cmluZyBvcGVyYXRvclJlZiA9IDE0Ow0KDQogICAgLy9Ob3QgcG9wdWxhdGVkIGJ5IGRlZmF1bHQuDQogICAgb3B0aW9uYWwgc3RyaW5nIG9wZXJhdG9yTmFtZSA9IDE2Ow0KDQogICAgb3B0aW9uYWwgTW9uaXRvcmluZyBtb25pdG9yaW5nID0gMTM7DQogICAgb3B0aW9uYWwgaW50NjQgY29ycmVsYXRpb25JZCA9IDE1Ow0KDQogIH0NCg0KICAvL0FuIGVudW1lcmF0aW9uIG9mIGFsbCB0aGUgcG9zc2libGUgY3JlYXRpb24gdHlwZXMNCiAgLy90aGF0IGFuIGFjdGl2aXR5IG1lc3NhZ2UgY2FuIGhhdmUuDQogIGVudW0gQ3J1ZFR5cGUgew0KICAgIENSRUFURSA9IDE7DQogICAgUkVBRCA9IDI7DQogICAgVVBEQVRFID0gMzsNCiAgICBERUxFVEUgPSA0Ow0KICAgIElOU0VSVCA9IDU7IC8vVXNlZCBmb3Igc3BvcnRzIGZlZWQgd2hpY2ggdXNlcyBJTlNFUlQgYXMgQ1JFQVRFIGNydWQgdHlwZQ0KICAgIFBVUkdFID0gNjsgLy9Vc2VkIGZvciBzZW5kaW5nIG1lc3NhZ2VzIHdpdGggbnVsbCBwYXlsb2FkIGluIGNvbXBhY3RlZCB0b3BpY3MgZnJvbSBkYW9zDQogIH0NCg0KICByZXF1aXJlZCBBY3Rpdml0eUhlYWRlciBoZWFkZXIgPSAxOw0KDQogIG9wdGlvbmFsIEJldFN0YXRlIHN0YXRlID0gMjAxOw0KICBvcHRpb25hbCBTdXBwb3J0aW5nU3RhdGUgc3VwcG9ydGluZ1N0YXRlID0gMjExOw0KfQ0KDQptZXNzYWdlIFNlcXVlbmNpbmdLZXkgew0KICBvcHRpb25hbCBTZXF1ZW5jaW5nRGVzY3JpcHRvciBzZXF1ZW5jaW5nRGVzY3JpcHRvciA9IDE7DQogIG9wdGlvbmFsIGludDMyIHNlcXVlbmNpbmdJZCA9IDI7DQp9DQoNCm1lc3NhZ2UgQWN0aXZpdHlEZXNjcmlwdG9yIHsNCiAgcmVxdWlyZWQgaW50MzIgaWQgPSAxOw0KICByZXF1aXJlZCBzdHJpbmcgbmFtZSA9IDI7DQogIG9wdGlvbmFsIHN0cmluZyBkZXNjcmlwdGlvbiA9IDM7DQp9DQoNCm1lc3NhZ2UgU2VxdWVuY2luZ0Rlc2NyaXB0b3Igew0KICByZXF1aXJlZCBpbnQzMiBpZCA9IDE7DQogIHJlcXVpcmVkIHN0cmluZyBuYW1lID0gMjsNCiAgb3B0aW9uYWwgc3RyaW5nIGRlc2NyaXB0aW9uID0gMzsNCn0NCg0KLy9BIGNsYXNzIGJlaW5nIHVzZWQgdG8gbW9uaXRvciBhbiBhY3Rpdml0eSB3aGlsZSBpdCBpcyBwcm9jZXNzZWQuDQovL1RoZXNlIHZhbHVlcyBjYW4gYmUgdXNlZCBmb3Igc3RhdGlzdGljYWwgYW5hbHlzaXMuDQptZXNzYWdlIE1vbml0b3Jpbmcgew0KICBvcHRpb25hbCBpbnQ2NCBpbml0aWFsaXplQXRDb2xsZWN0b3IgPSAxOw0KICBvcHRpb25hbCBpbnQ2NCBiZWZvcmVTdWJtaXRUb0NvbXBvc2VyID0gMjsNCiAgb3B0aW9uYWwgaW50NjQgc3RhcnRDb21wb3NlclF1ZXJ5ID0gMzsNCiAgb3B0aW9uYWwgaW50NjQgZW5kQ29tcG9zZXJRdWVyeSA9IDQ7DQogIG9wdGlvbmFsIGludDY0IG9yY2hlc3RyYXRvclJlY2VpdmUgPSA1Ow0KICBvcHRpb25hbCBpbnQ2NCBvcmNoZXN0cmF0b3JTZW5kID0gNjsNCn0NCg0KbWVzc2FnZSBTb3VyY2Ugew0KICBvcHRpb25hbCBzdHJpbmcgY2hhbm5lbFJlZiA9IDE7DQogIG9wdGlvbmFsIHN0cmluZyBzaXRlUmVmID0gMjsNCiAgb3B0aW9uYWwgc3RyaW5nIGp1cmlzZGljdGlvblJlZiA9IDM7DQogIG9wdGlvbmFsIHN0cmluZyBwcm9kdWN0UmVmID0gNDsNCiAgb3B0aW9uYWwgc3RyaW5nIHBsYXRmb3JtUmVmID0gNTsNCiAgb3B0aW9uYWwgc3RyaW5nIGRldmljZVJlZiA9IDY7DQogIG9wdGlvbmFsIHN0cmluZyBpcEFkZHIgPSA3Ow0KfQ0KDQovLyBVc2VkIHRvIHN0b3JlIHJlZmVyZW5jZXMgdG8gZXh0ZXJuYWwgc3lzdGVtcw0KbWVzc2FnZSBFeHRlcm5hbFJlZiB7DQogIHJlcXVpcmVkIHN0cmluZyBwcm92aWRlciA9IDE7DQogIHJlcXVpcmVkIHN0cmluZyBpZCA9IDI7DQogIG9wdGlvbmFsIHN0cmluZyByZWZUeXBlID0gMzsNCiAgb3B0aW9uYWwgc3RyaW5nIHVyaSA9IDQ7DQp9DQoNCm1lc3NhZ2UgQmV0IHsNCiAgcmVxdWlyZWQgc3RyaW5nIGlkID0gMTsNCiAgb3B0aW9uYWwgc3RyaW5nIGNyZWF0aW9uRGF0ZSA9IDI7Ly9JU08gODYwMSBEYXRlIFRpbWUgRm9ybWF0DQoNCiAgLy8gVGhlIGN1c3RvbWVyIGFjY291bnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBiZXQNCiAgb3B0aW9uYWwgc3RyaW5nIGFjY291bnRSZWYgPSAzOw0KDQogIC8vIFRoZSBjdXN0b21lciB3aG9zZSBhY2NvdW50IHBsYWNlZCB0aGUgYmV0Lg0KICBvcHRpb25hbCBzdHJpbmcgY3VzdG9tZXJSZWYgPSA0Ow0KDQogIG9wdGlvbmFsIGNvcmUuU291cmNlIHNvdXJjZSA9IDU7DQoNCiAgLy8gVW5pcXVlIGlkcyBhc3NpZ25lZCBieSBleHRlcm5hbCBzeXN0ZW1zLg0KICByZXBlYXRlZCBjb3JlLkV4dGVybmFsUmVmIGV4dGVybmFsVUlEID0gMjI7DQoNCiAgLy8gSW5kaWNhdGVzIGhvdyB0aGUgbGVncyBpbiB0aGUgYmV0IGFyZSBjb21iaW5lZC4gIENvbW1vbiBiZXQgdHlwZXMgd2lsbCBiZToNCiAgLy8gU0dMIC0gU2luZ2xlDQogIC8vIERCTCAtIERvdWJsZQ0KICAvLyBUQkwgLSBUcmVibGUNCiAgLy8gQUNDNCwgQUNDNSAuLi4gQUNDOSAtIFN0cmFpZ2h0IGFjY3VtdWxhdG9ycyBvZiA0LTkgbGVncw0KICAvLyBBQ25uIC0gU3RyYWlnaHQgYWNjdW11bGF0b3Igb2YgMTAgbGVncyBvciBtb3JlDQogIC8vIFRSWCAtIFRyaXhpZQ0KICAvLyBQQVQgLSBQYXRlbnQNCiAgb3B0aW9uYWwgc3RyaW5nIGJldFR5cGVSZWYgPSA2Ow0KDQogIC8vIERhdGUgYW5kIHRpbWUgb2Ygd2hlbiB0aGUgYmV0IHdhcyBwbGFjZWQgaW4gSVNPODYwMSBmb3JtYXQNCiAgb3B0aW9uYWwgc3RyaW5nIHBsYWNlZEF0ID0gNzsNCg0KICAvLyBTdHJpbmcgZ2l2ZW4gdG8gdGhlIGN1c3RvbWVyIHRvIGlkZW50aWZ5IHRoZSBiZXQgb24gc3VjY2Vzc2Z1bCBwbGFjZW1lbnQuDQogIG9wdGlvbmFsIHN0cmluZyByZWNlaXB0ID0gODsNCg0KICAvLyBJcyB0aGUgYmV0IHNldHRsZWQ/DQogIG9wdGlvbmFsIGJvb2wgaXNTZXR0bGVkID0gOTsNCg0KICAvLyBIYXMgdGhlIGJldCBiZWVuIGFjY2VwdGVkPw0KICBvcHRpb25hbCBib29sIGlzQ29uZmlybWVkID0gMTA7DQoNCiAgLy8gSGFzIHRoZSBiZXQgYmVlbiBjYW5jZWxsZWQ/DQogIG9wdGlvbmFsIGJvb2wgaXNDYW5jZWxsZWQgPSAxMTsNCg0KICAvLyBIYXMgdGhlIGJldCBiZWVuIGNhc2hlZCBvdXQgYnkgdGhlIGN1c3RvbWVyIHByaW9yIHRvIHJlc3VsdGluZyBvZiB0aGUgZXZlbnRzPw0KICBvcHRpb25hbCBib29sIGlzQ2FzaGVkT3V0ID0gMTI7DQoNCiAgLy8gSXMgdGhpcyBhIHBvb2wgYmV0Pw0KICBvcHRpb25hbCBib29sIGlzUG9vbEJldCA9IDEzOw0KDQogIC8vIERhdGUgYW5kIHRpbWUgb2Ygd2hlbiB0aGUgYmV0IHdhcyBwbGFjZWQgaW4gSVNPODYwMSBmb3JtYXQNCiAgb3B0aW9uYWwgc3RyaW5nIHNldHRsZWRBdCA9IDE0Ow0KDQogIC8vIEhvdyB0aGUgYmV0IHdhcyBzZXR0bGVkDQogIG9wdGlvbmFsIHN0cmluZyBzZXR0bGVkSG93ID0gMTU7DQoNCiAgLy9MZWF2ZSBhIGdhcCBoZXJlIGZvciBvdGhlciBjb21tb24gZmxhZ3MNCg0KICAvLyBQbGFjZWQgQnkgQ3VzdG9tZXI6ICBCZXRzIG1heSBiZSBwbGFjZWQgdW5kZXIgYSBzeW5kaWNhdGUgY3VzdG9tZXIgYWNjb3VudA0KICAvLyBJZiB0aGlzIGlzIHRoZSBjYXNlIHRoZSBjdXN0b21lciBpbiB0aGUgc3luZGljYXRlIHRoYXQgcGxhY2VkIHRoZSBiZXQNCiAgLy8gaXMgY2FwdHVyZWQgaGVyZToNCiAgb3B0aW9uYWwgc3RyaW5nIHBsYWNlZEJ5Q3VzdG9tZXJSZWYgPSAyMDsNCg0KICAvLyBQYXJrZWQgQmV0DQogIC8vIEEgYmV0IGNhbiBiZSBwYXJrZWQgaW4gb25lIG9mIHR3byB3YXlzDQogIC8vIDEpIEF1dG9tYXRpY2FsbHkgcGFya2VkLCBpbiB0aGUgZXZlbnQgaXMgc2V0dGxlZCBhbmQgYSBiZXQgaGFzIHJldHVybnMgb2YgbW9yZQ0KICAvLyAgICB0aGFuIDIwLDAwMCBHQlAgdGhlIGJldCBpcyBhdXRvbWF0aWNhbGx5IHBhcmtlZCBhbGxvd2luZyBhIHRyYWRlciB0byByZXZpZXcNCiAgLy8gICAgYW5kIGdyYW50IGZpbmFsIHNldHRsZW1lbnQNCiAgLy8gMikgQSBiZXQgY2FuIGJlIG1hbnVhbGx5IHBhcmtlZCAoaXJyZXNwZWN0aXZlIG9mIGFtb3VudCkuIEEgY29tbW9uIHJlYXNvbiBpcyBhDQogIC8vICAgIHN1c3BpY2lvbiBhYm91dCB0aGUgYmV0IG9yIGFueSBzdXNwaWNpb3VzIGJldHRpbmcgcGF0dGVybnMuIFR5cGljYWxseSBhDQogIC8vICAgIHRyYWRlciB3b3VsZCBtYW51YWxseSBwYXJrIGEgYmV0Lg0KICBvcHRpb25hbCBib29sIGlzUGFya2VkID0gMjE7DQoNCiAgLy8gVGhlIHN0YWtlIGlzIGNvbnN0cnVjdGVkIG9mIGJvdGggZnVuZHMgZnJvbSB0aGUgY3VzdG9tZXIncyBhY2NvdW50IGFuZA0KICAvLyBmcmVlYmV0IHRva2Vucy4gVGhlIG1vbmV0YXJ5IGZvcm1hdCBpcyBnaXZlbiB0byAyZHAuICQxMCB3b3VsZCBiZQ0KICAvLyAxMC4wMA0KICBtZXNzYWdlIFN0YWtlIHsNCiAgICAvLyBUb3RhbCBzdGFrZQ0KICAgIG9wdGlvbmFsIHN0cmluZyBhbW91bnQgPSAxOw0KDQogICAgLy8gU3Rha2Ugd2FnZXJlZCBvbiBlYWNoIGxpbmUNCiAgICBvcHRpb25hbCBzdHJpbmcgc3Rha2VQZXJMaW5lID0gMjsNCg0KICAgIC8vIEZyZWViZXQgY29udHJpYnV0aW9uIHRvd2FyZHMgdGhlIHN0YWtlLg0KICAgIG9wdGlvbmFsIHN0cmluZyBmcmVlQmV0ID0gMzsNCg0KICAgIC8vIElTTyA0MjE3IHRocmVlIGxldHRlciBjdXJyZW5jeSBjb2RlDQogICAgb3B0aW9uYWwgc3RyaW5nIGN1cnJlbmN5UmVmID0gNDsNCiAgfQ0KDQogIG9wdGlvbmFsIFN0YWtlIHN0YWtlID0gMzA7DQoNCiAgLy8gVGhlIGFtb3VudCBpbiB0aGUgcG9vbCdzIGN1cnJlbmN5DQogIG9wdGlvbmFsIFN0YWtlIHBvb2xTdGFrZSA9IDMxOw0KDQogIG1lc3NhZ2UgUGF5b3V0IHsNCiAgICAvLyBBbW91bnQgcGFpZCBiYWNrIGFzIHdpbm5pbmdzIHRvIDJkcCBlLmcuIDEwLjAwDQogICAgb3B0aW9uYWwgc3RyaW5nIHdpbm5pbmdzID0gMTsNCg0KICAgIC8vIEFtb3VudCBwYWlkIGJhY2sgYXMgYSByZWZ1bmQgb2Ygc3Rha2UgdG8gMmRwIGUuZy4gMTAuMDANCiAgICBvcHRpb25hbCBzdHJpbmcgcmVmdW5kcyA9IDI7DQoNCiAgICAvLyBUaGUgcG90ZW50aWFsIGFtb3VudCB0aGF0IGEgYmV0IGNvdWxkIHdpbiBpZiBlYWNoIGxpbmUgd2VyZSB0byB3aW4uDQogICAgb3B0aW9uYWwgc3RyaW5nIHBvdGVudGlhbCA9IDM7DQogIH0NCg0KICBvcHRpb25hbCBQYXlvdXQgcGF5b3V0ID0gNDA7DQoNCiAgLy8gTGluZXMgYXJlIHRoZSBpbmRpdmlkdWFsIHdhZ2VycyB0aGF0IG1ha2UgdXAgdGhlIGJldC4gVG8gZ2l2ZSBhbiBleGFtcGxlDQogIC8vIGEgdHJpeGllIGlzIG1hZGUgb2YgYSBiZXQgb24gdGhyZWUgbGVnczsgdGhlIHRyZWJsZSBhbmQgYWxsIHRoZSBwb3NzaWJsZQ0KICAvLyBkb3VibGVzLiAgVGhhdCBpcyB0byBzYXksIG9uIGxlZ3MgQSxCIGFuZCBDIHdlIHdvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyB3YWdlcnM6DQogIC8vIEFCQywgQUIsIEJDLCBBQw0KICAvLyBzbyB0aGlzIGJldCB3b3VsZCBoYXZlIGZvdXIgbGluZXMuDQogIG1lc3NhZ2UgTGluZXMgew0KICAgIC8vIE51bWJlciBvZiBsaW5lcyBpbiB0aGUgYmV0DQogICAgb3B0aW9uYWwgaW50MzIgbnVtYmVyID0gMTsNCg0KICAgIC8vIE51bWJlciBvZiBsaW5lcyBpbiB0aGUgYmV0IHRoYXQgaGF2ZSB3b24uICBGb3IgZXhhbXBsZSBpZiBpbiB0aGUgdHJpeGllDQogICAgLy8gb24gc2VsZWN0aW9ucyBBLCBCIGFuZCBDIHdoZXJlIEMgbG9zdCBidXQgQSBhbmQgQiBoYWQgd29uIHRoZW4gdGhlIEFCIGRvdWJsZQ0KICAgIC8vIGxpbmUgd291bGQgYmUgYSB3aW5uZXIgYnV0IHRoZSBvdGhlciB0aHJlZSBsaW5lcyB3b3VsZCBoYXZlIGxvc3QuDQogICAgLy8gSW4gdGhpcyBjYXNlIExpbmVzLndpbiB3b3VsZCBiZSBzZXQgdG8gMS4NCiAgICBvcHRpb25hbCBpbnQzMiB3aW4gPSAyOw0KDQogICAgLy8gTnVtYmVyIG9mIGxvc2luZyBsaW5lcyBpbiB0aGUgYmV0Lg0KICAgIG9wdGlvbmFsIGludDMyIGxvc2UgPSAzOw0KDQogICAgLy8gTnVtYmVyIG9mIHZvaWRlZCBsaW5lcyBpbiB0aGUgYmV0Lg0KICAgIG9wdGlvbmFsIGludDMyIHZvaWRlZCA9IDQ7DQogIH0NCg0KICBvcHRpb25hbCBMaW5lcyBsaW5lcyA9IDUwOw0KDQogIC8vIFRoZSBsZWdzIG9mIHRoZSBiZXQgYXJlIHRoZSBpdGVtcyB0aGF0IHdlIG5lZWQgdG8ga25vdyB0aGUgcmVzdWx0IG9mIGJlZm9yZSB3ZSBjYW4gc2V0dGxlDQogIC8vIHRoZSBiZXQuDQogIC8vIE5vcm1hbGx5IGEgbGVnIHdvdWxkIGJlIG1hZGUgdXAgb2YganVzdCBvbmUgc2VsZWN0aW9uIHRoYXQgd2UganVzdCBuZWVkIHRvIGtub3cgd2hldGhlciBpdA0KICAvLyB3b24gb3Igbm90LiAgQW4gZXhhbXBsZSB3b3VsZCBiZSAnTGl2ZXJwb29sIHRvIHdpbiB0aGUgRkEgQ3VwJy4NCiAgLy8gSW4gY29tcGxleCBsZWdzIHdlIG5lZWQgdG8ga25vdyB0aGUgcmVzdWx0IG9mIG11bHRpcGxlIG91dGNvbWVzIGJlZm9yZSB3ZSBjYW4gZGVjaWRlIHdoZXRoZXINCiAgLy8gdGhlIGxlZyBpcyBhIHdpbm5lciBvciBub3QuICBBbiBleGFtcGxlIG9mIHRoaXMgd291bGQgYmUgYSBmb3JlY2FzdCBsZWcgd2hlcmUgYSBwbGF5ZXINCiAgLy8gd291bGQgcGljayBhIGhvcnNlIHRvIGNvbWUgZmlyc3QgYW5kIG9uZSB0byBjb21lIHNlY29uZCBhbmQgd2UgbmVlZCB0byBrbm93IHRoZSBmaW5hbA0KICAvLyBwbGFjZSBvZiBib3RoIHNlbGVjdGlvbnMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGxlZyBoYXMgd29uIG9yIG5vdC4NCiAgbWVzc2FnZSBMZWcgew0KDQogICAgLy8gVGhlIHByaWNlIG9mIHRoZSBsZWcgZGV0ZXJtaW5lcyB0aGUgcG90ZW50aWFsIHVuaXQgcmV0dXJuIGlmIHRoYXQgbGVnIHdlcmUgdG8gd2luLg0KICAgIC8vIFRoZSBwcmljZSBpcyBzdG9yZWQgYXMgYSBmcmFjdGlvbmFsIG51bWVyYXRvciAvIGRlbm9taW5hdG9yIChzbyBhcyB0byBub3QgbG9zZQ0KICAgIC8vIHByZWNpc2lvbikuICBXaGVyZSB0aGVyZSBhcmUgbm8gc2V0dGxlbWVudCBkZWR1Y3Rpb25zIHRoZSB3aW4gdW5pdCBzdGFrZSBsZWcgcmV0dXJuIGlzDQogICAgLy8gZ2l2ZW4gYnkgKDEgKyBQcmljZS5udW0gLyBQcmljZS5kZW4pDQogICAgbWVzc2FnZSBQcmljZSB7DQoNCiAgICAgIC8vIFRoZSBudW1lcmF0b3Igb2YgdGhlIHByaWNlLiAgZWcgaWYgdGhlIHByaWNlIGlzIDUvMiBQcmljZS5udW0gPSA1DQogICAgICBvcHRpb25hbCBpbnQzMiBudW0gPSAxOw0KDQogICAgICAvLyBUaGUgZGVub21pbmF0b3Igb2YgdGhlIHByaWNlLiAgZWcgaWYgdGhlIHByaWNlIGlzIDUvMiBQcmljZS5kZW4gPSAyDQogICAgICBvcHRpb25hbCBpbnQzMiBkZW4gPSAyOw0KDQogICAgICAvLyBUaGlzIGlzIHRoZSBkZWNpbWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwcmljZSBmb3IgZGlzcGxheSBwdXJwb3Nlcy4NCiAgICAgIC8vIFRoZXJlIGFyZSBpbnN0YW5jZXMgd2hlcmUgaXQgZGlmZmVycyBmcm9tIHRoZSB2YWx1ZSBjb21wdXRlZCBieSBkaXZpZGluZw0KICAgICAgLy8gbnVtZXJhdG9yIGJ5IGRlbm9taW5hdG9yDQogICAgICAvLyAoc2VlIGh0dHBzOi8vamlyYS5vcGVuYmV0LmNvbS9icm93c2UvT0JCUC01MjEpLg0KICAgICAgb3B0aW9uYWwgc3RyaW5nIGRlY2ltYWwgPSAzOw0KDQogICAgICAvLyBSZWZlcmVuY2UgdG8gYSBiZXQvcHJpY2VUeXBlIGVudGl0eS4gRGVzY3JpYmVzIGhvdyB0aGUgcmV0dXJuIHByaWNlDQogICAgICAvLyB3aWxsIGJlIG9idGFpbmVkLg0KICAgICAgLy8gRk9STUFUOiBUaGUgSUQgd2lsbCBiZSBvZiB0aGUgZm9ybSBbQS1aX10gYW5kIHdpbGwgbmF0dXJhbGx5DQogICAgICAvLyBkZXNjcmliZSB0aGUgcHJpY2UgdHlwZSBlZyBMUCBmb3IgbGl2ZSBwcmljZSwgU1Agc3RhcnRpbmcgcHJpY2UgZXRjLg0KICAgICAgb3B0aW9uYWwgc3RyaW5nIHByaWNlVHlwZVJlZiA9IDQ7DQoNCiAgICAgIC8vIE1hcmsgYXZhaWxhYmlsaXR5IG9mIGEgZWFybHkgcHJpY2UuDQogICAgICBvcHRpb25hbCBib29sIGlzRWFybHlQcmljZUFjdGl2ZSA9IDU7DQogICAgfQ0KDQogICAgb3B0aW9uYWwgUHJpY2UgcHJpY2UgPSAxOw0KDQogICAgLy8gIFRoaXMgZW50aXR5IHdpbGwgaW5kaWNhdGUgaG93IHRoZSBmaW5hbCBwb3NpdGlvbiBvZiB0aGUgb3V0Y29tZQ0KICAgIC8vICBzaG91bGQgZGV0ZXJtaW5lIHRoZSByZXN1bHQuIEV4YW1wbGVzIHdvdWxkIGJlOg0KICAgIC8vICBXSU46IEl0IGhhcyB0byB3aW4NCiAgICAvLyAgUExBQ0U6IEl0IGhhcyB0byBmaW5pc2ggaW4gdGhlIHRvcCB4IHBsYWNlcw0KICAgIC8vICBFWFBMSUNJVF9QTEFDRVM6IFRoZSBvdXRjb21lQ29tYmkgb24gdGhlIGxlZyBkZXRlcm1pbmVzIHRoZSBudW1iZXINCiAgICAvLyAgb2YgcGxhY2VzLiBUaGUgbGVnUGFydC5wbGFjZSBkZXRlcm1pbmVzIHdoZXJlIHRoZSBvdXRjb21lIG11c3QNCiAgICAvLyAgZmluaXNoIHdpdGhpbiB0aG9zZSByZXN0cmljdGlvbnMuDQogICAgb3B0aW9uYWwgc3RyaW5nIHdpblBsYWNlUmVmID0gMjsNCg0KICAgIG1lc3NhZ2UgTGVnUGFydCB7DQogICAgICAvLyBUaGUgb3V0Y29tZSB3ZSBhcmUgYmV0dGluZyBvbiAodEV2T2MuZXZfb2NfaWQpDQogICAgICBvcHRpb25hbCBzdHJpbmcgb3V0Y29tZVJlZiA9IDE7DQoNCiAgICAgIC8vIFRoZSBtYXJrZXQgd2UgYXJlIGJldHRpbmcgb24gKHRFdk1rdC5ldl9ta3RfaWQpDQogICAgICBvcHRpb25hbCBzdHJpbmcgbWFya2V0UmVmID0gMjsNCg0KICAgICAgLy8gVGhlIGV2ZW50IHdlIGFyZSBiZXR0aW5nIG9uICh0RXYuZXZfaWQpDQogICAgICBvcHRpb25hbCBzdHJpbmcgZXZlbnRSZWYgPSAzOw0KDQogICAgICAvLyBUaGlzIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBwbGFjZXMNCiAgICAgIC8vIHdoZXJlIHRoaXMgcGFydCBjYW4gZmluaXNoLiAnKicgaW5kaWNhdGVzIHRoYXQgaXQgbWF5IGZpbmlzaCBpbiBhbnkNCiAgICAgIC8vIHBvc2l0aW9uLiBJZiBJIGhhZCBhIGJveGVkIHRyaWNhc3Qgd2l0aCBvbmUgc2VsZWN0aW9uIHdpdGggMSwyIGFuZA0KICAgICAgLy8gdHdvIG90aGVyIHBhcnRzIG1hcmtlZCB3aXRoICogaXQgd291bGQgZ2l2ZSBtZSBhbGwgdGhlIHBlcm11dGF0aW9ucw0KICAgICAgLy8gd2hlcmUgdGhlIGZpcnN0IHNlbGVjdGlvbiBmaW5pc2hlcyBpbiB0aGUgZmlyc3QgdHdvIHBsYWNlcy4NCiAgICAgIG9wdGlvbmFsIHN0cmluZyBwbGFjZXMgPSA4Ow0KDQogICAgICAvLyBJZiB0aGlzIGJldCBpcyBiZXQgaW4gcnVubmluZyAodE9CZXQuaW5fcnVubmluZykNCiAgICAgIG9wdGlvbmFsIGJvb2wgaXNJblJ1bm5pbmcgPSA5Ow0KDQogICAgICAvLyBUaGUgcHJlZmVycmVkIHNlbGVjdGlvbiBmb3IgdGhlIGxlZyBpbiB0aGUgYmV0dGluZyBzeXN0ZW0NCiAgICAgIG9wdGlvbmFsIGJvb2wgYmV0dGluZ1N5c3RlbVByZWZlcnJlZCA9IDEwOw0KDQogICAgICBtZXNzYWdlIFBsYWNlVGVybXMgew0KDQogICAgICAgIC8vIFRoZSBudW1lcmF0b3Igb2YgdGhlIHBsYWNlIHRlcm1zDQogICAgICAgIG9wdGlvbmFsIGludDMyIG51bSA9IDE7DQoNCiAgICAgICAgLy8gVGhlIGRlbm9taW5hdG9yIG9mIHBsYWNlIHRlcm1zDQogICAgICAgIG9wdGlvbmFsIGludDMyIGRlbiA9IDI7DQoNCiAgICAgICAgLy8gVGhlIG51bWJlciBvZiBwbGFjZXMgb2ZmZXJlZA0KICAgICAgICBvcHRpb25hbCBpbnQzMiBwbGFjZXMgPSAzOw0KDQogICAgICB9DQoNCiAgICAgIG9wdGlvbmFsIFBsYWNlVGVybXMgcGxhY2VUZXJtcyA9IDExOw0KDQogICAgfQ0KDQogICAgLy9UaGUgaGFuZGljYXAgZmllbGQgaXMgdXNlZCB0byBjYXB0dXJlIGxldmVscyBhc3NvY2lhdGVkIHdpdGggdGhlDQogICAgLy9vdXRjb21lIHN1Y2ggYXMgaGFuZGljYXBzIGFuZCBmaW5hbmNpYWwgbGluZSBwb3NpdGlvbnMuIFRoZSBoaS9sbw0KICAgIC8vdmFsdWVzIGNhbiBjYXB0dXJlIHNwbGl0IGxpbmUgaGFuZGljYXBzIG9yIHJhbmdlIGJldHRpbmcgaW4NCiAgICAvL2ZpbmFuY2lhbHMuIFRoZSBoYW5kaWNhcFR5cGVSZWYgd2lsbCBpbmRpY2F0ZSBob3cgdGhlc2UgZmlndXJlcw0KICAgIC8vc2hvdWxkIGJlIGludGVycHJldGVkIC0gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgaG9tZSBhbmQgYXdheQ0KICAgIC8vc2NvcmVzLCBjb21iaW5lZCBzY29yZSBhdCBoYWxmLXRpbWUgZXRjLi4uDQogICAgbWVzc2FnZSBIYW5kaWNhcCB7DQogICAgICByZXF1aXJlZCBzdHJpbmcgaGFuZGljYXBUeXBlUmVmID0gMTsNCiAgICAgIG9wdGlvbmFsIHN0cmluZyBsb3cgPSAyOw0KICAgICAgb3B0aW9uYWwgc3RyaW5nIGhpZ2ggPSAzOw0KICAgIH0NCg0KICAgIHJlcGVhdGVkIExlZ1BhcnQgbGVnUGFydHMgPSAzOw0KICAgIG9wdGlvbmFsIHN0cmluZyByZXN1bHQgPSA0Ow0KICAgIG9wdGlvbmFsIHN0cmluZyBwb29sSWQgPSA1Ow0KICAgIG9wdGlvbmFsIHN0cmluZyBsZWdTb3J0ID0gNjsNCiAgICBvcHRpb25hbCBpbnQzMiBpbmRleCA9IDc7DQogICAgb3B0aW9uYWwgSGFuZGljYXAgaGFuZGljYXAgPSA4Ow0KDQogICAgLy9JbmRpY2F0ZXMgdGhhdCB0aGlzIHNlbGVjdGlvbiBjYW4gbm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXJzIGluIHRoZSBiZXQNCiAgICBvcHRpb25hbCBzdHJpbmcgbm9Db21iaSA9IDk7DQogIH0NCg0KICBtZXNzYWdlIEJldFRlcm1DaGFuZ2Ugew0KDQogICAgbWVzc2FnZSBMZWdDaGFuZ2Ugew0KDQogICAgICBtZXNzYWdlIFByaWNlIHsNCiAgICAgICAgb3B0aW9uYWwgaW50MzIgbnVtID0gMTsNCiAgICAgICAgb3B0aW9uYWwgaW50MzIgZGVuID0gMjsNCiAgICAgICAgb3B0aW9uYWwgc3RyaW5nIHByaWNlVHlwZVJlZiA9IDM7DQogICAgICB9DQoNCiAgICAgIG9wdGlvbmFsIFByaWNlIHByaWNlID0gMTsNCiAgICB9DQoNCiAgICByZXF1aXJlZCBzdHJpbmcgYmV0SWQgPSAxOw0KICAgIG9wdGlvbmFsIHN0cmluZyBjaGFuZ2VUaW1lID0gMjsNCiAgICBvcHRpb25hbCBzdHJpbmcgbGVnTnVtYmVyID0gMzsNCiAgICBvcHRpb25hbCBMZWdDaGFuZ2UgbGVnQ2hhbmdlID0gNDsNCg0KICB9DQoNCiAgcmVwZWF0ZWQgTGVnIGxlZyA9IDYwOw0KICByZXBlYXRlZCBCZXRUZXJtQ2hhbmdlIGJldFRlcm1DaGFuZ2UgPSA2MTsNCg0KICBtZXNzYWdlIFBvb2xCZXRTeXN0ZW0gew0KICAgIG9wdGlvbmFsIHN0cmluZyBiZXRTeXN0ZW1SZWYgPSAxOw0KICAgIG9wdGlvbmFsIHN0cmluZyBjdXN0b21MaW5lUmVmID0gMjsNCiAgfQ0KDQogIG9wdGlvbmFsIFBvb2xCZXRTeXN0ZW0gcG9vbEJldFN5c3RlbSA9IDYyOw0KICBvcHRpb25hbCBzdHJpbmcgcG9vbEJldFN1YnNjcmlwdGlvblJlZiA9IDYzOw0KDQogIC8vIElzIHRoZSBiZXQgcGVuZGluZyBhcHByb3ZhbD8NCiAgb3B0aW9uYWwgYm9vbCBpc1BlbmRpbmcgPSA2NDsNCg0KICBtZXNzYWdlIEJldE92ZXJyaWRlIHsNCiAgICByZXF1aXJlZCBzdHJpbmcgaWQgPSAxOw0KICAgIG9wdGlvbmFsIHN0cmluZyBvcGVyYXRvclJlZiA9IDI7DQogICAgb3B0aW9uYWwgc3RyaW5nIGNyZWF0aW9uRGF0ZSA9IDM7DQogICAgb3B0aW9uYWwgc3RyaW5nIGFjdGlvbiA9IDQ7DQogICAgb3B0aW9uYWwgc3RyaW5nIGNhbGxSZWYgPSA1Ow0KICAgIG9wdGlvbmFsIHN0cmluZyByZWFzb24gPSA2Ow0KICAgIG9wdGlvbmFsIGludDMyICBsZWdObyA9IDc7DQogICAgb3B0aW9uYWwgaW50MzIgIHBhcnRObyA9IDg7DQogICAgb3B0aW9uYWwgc3RyaW5nIHJlZklkID0gOTsNCiAgfQ0KDQogIHJlcGVhdGVkIEJldE92ZXJyaWRlIGJldE92ZXJyaWRlcyA9IDY1Ow0KfQ0KDQptZXNzYWdlIEJldFNsaXAgew0KICByZXF1aXJlZCBzdHJpbmcgaWQgPSAxOw0KICBvcHRpb25hbCBzdHJpbmcgYWNjb3VudFJlZiA9IDI7DQogIC8vIElTTyA4NjAxIGRhdGUgdGltZSBmb3JtYXQNCiAgb3B0aW9uYWwgc3RyaW5nIGNyZWF0aW9uRGF0ZSA9IDM7DQogIG9wdGlvbmFsIEJldC5TdGFrZSB0b3RhbFN0YWtlID0gNDsNCn0NCg0KLy8gU3RhdGUgb2YgZW50aXRpZXMgcmVwcmVzZW50ZWQgdXBvbiBiZXR0aW5nIGFjdGl2aXR5Lg0KbWVzc2FnZSBCZXRTdGF0ZSB7DQogIC8vZGVwcmVjYXRlZA0KICBvcHRpb25hbCBCZXQgYmV0ID0gMTsNCg0KICByZXBlYXRlZCBCZXQgYmV0cyA9IDI7DQogIG9wdGlvbmFsIEJldFNsaXAgYmV0U2xpcCA9IDM7DQp9DQoNCm1lc3NhZ2UgU3VwcG9ydGluZ1N0YXRlIHsNCg0KICBtZXNzYWdlIE91dGNvbWUgew0KDQogICAgLy8gVGhlIG91dGNvbWUgd2UgYXJlIGJldHRpbmcgb24gKHRFdk9jLmV2X29jX2lkKQ0KICAgIG9wdGlvbmFsIHN0cmluZyBvdXRjb21lUmVmID0gMTsNCg0KICAgIC8vIFRoZSBtYXJrZXQgd2UgYXJlIGJldHRpbmcgb24gKHRFdk1rdC5ldl9ta3RfaWQpDQogICAgb3B0aW9uYWwgc3RyaW5nIG1hcmtldFJlZiA9IDI7DQoNCiAgICAvLyBUaGUgZXZlbnQgd2UgYXJlIGJldHRpbmcgb24gKHRFdi5ldl9pZCkNCiAgICBvcHRpb25hbCBzdHJpbmcgZXZlbnRSZWYgPSAzOw0KDQogICAgLy8gVGhlIG1hcmtldCB0ZW1wbGF0ZSByZWZlcmVuY2UgdXNlZCAodEV2TWt0LmV2X29jX2dycF9pZCkNCiAgICBvcHRpb25hbCBzdHJpbmcgbWFya2V0VGVtcGxhdGVSZWYgPSAxMjsNCg0KICAgIC8vIER1cGxpY2F0aW5nIG1hcmtldFRlbXBsYXRlUmVmLCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbg0KICAgIG9wdGlvbmFsIHN0cmluZyB0ZW1wbGF0ZU1hcmtldFJlZiA9IDggW2RlcHJlY2F0ZWQ9dHJ1ZV07DQoNCiAgICAvLyBUaGUgZXZlbnQgdHlwZSB3ZSBhcmUgYmV0dGluZyBvbiAodEV2LmV2X3R5cGVfaWQpDQogICAgb3B0aW9uYWwgc3RyaW5nIHR5cGVSZWYgPSA5Ow0KDQogICAgLy8gVGhlIGV2ZW50IGNsYXNzIHdlIGFyZSBiZXR0aW5nIG9uICh0RXYuZXZfY2xhc3NfaWQpDQogICAgb3B0aW9uYWwgc3RyaW5nIGNsYXNzUmVmID0gMTA7DQoNCiAgICAvLyBUaGUgZXZlbnQgY2F0ZWdvcnkgd2UgYXJlIGJldHRpbmcgb24gKHRFdkNsYXNzLmNhdGVnb3J5KQ0KICAgIG9wdGlvbmFsIHN0cmluZyBjYXRlZ29yeVJlZiA9IDExOw0KDQogICAgb3B0aW9uYWwgc3RyaW5nIG91dGNvbWVOYW1lID0gNDsNCiAgICBvcHRpb25hbCBzdHJpbmcgbWFya2V0TmFtZSA9IDU7DQogICAgb3B0aW9uYWwgc3RyaW5nIG1hcmtldFNvcnQgPSAxMzsNCiAgICBvcHRpb25hbCBzdHJpbmcgZXZlbnROYW1lID0gNjsNCiAgICBvcHRpb25hbCBzdHJpbmcgZXZlbnRTdGFydFRpbWUgPSA3Ow0KICAgIG9wdGlvbmFsIHN0cmluZyBjbGFzc1NvcnQgPSAxNDsNCg0KICAgIG1lc3NhZ2UgUGxhY2VUZXJtcyB7DQoNCiAgICAgIC8vIFRoZSBudW1lcmF0b3Igb2YgdGhlIHBsYWNlIHRlcm1zDQogICAgICBvcHRpb25hbCBpbnQzMiBudW0gPSAxOw0KDQogICAgICAvLyBUaGUgZGVub21pbmF0b3Igb2YgcGxhY2UgdGVybXMNCiAgICAgIG9wdGlvbmFsIGludDMyIGRlbiA9IDI7DQoNCiAgICAgIC8vIFRoZSBudW1iZXIgb2YgcGxhY2VzIG9mZmVyZWQNCiAgICAgIG9wdGlvbmFsIGludDMyIHBsYWNlcyA9IDM7DQoNCiAgICB9DQoNCiAgICBvcHRpb25hbCBQbGFjZVRlcm1zIG1hcmtldFBsYWNlVGVybXMgPSAxNTsNCg0KICB9DQoNCiAgbWVzc2FnZSBQb29sIHsNCiAgICBvcHRpb25hbCBzdHJpbmcgcG9vbE5hbWUgPSAxOw0KICAgIG9wdGlvbmFsIHN0cmluZyBwb29sVHlwZU5hbWUgPSAyOw0KICAgIG9wdGlvbmFsIHN0cmluZyBwb29sVHlwZUlkID0gMzsNCiAgICBvcHRpb25hbCBzdHJpbmcgY2xvc2luZ1RpbWUgPSA0Ow0KICAgIG9wdGlvbmFsIHN0cmluZyBqYWNrcG90TmFtZSA9IDU7DQogICAgb3B0aW9uYWwgc3RyaW5nIHJha2VQZXJjZW50YWdlID0gNjsNCiAgfQ0KDQogIG1lc3NhZ2UgQ3VzdG9tZXIgew0KICAgIG9wdGlvbmFsIHN0cmluZyBhY2NvdW50TnVtYmVyID0gMTsNCiAgfQ0KDQogIHJlcGVhdGVkIE91dGNvbWUgb3V0Y29tZSA9IDE7DQogIHJlcGVhdGVkIFBvb2wgcG9vbCA9IDI7DQogIG9wdGlvbmFsIEN1c3RvbWVyIGN1c3RvbWVyID0gMzsNCn0=",
        "doc": "A basic schema for storing user records"
      }
    },
    {
      "type": "avro",
      "id": "avroschema1",
      "name": "avroschema1",
      "version": "version2",
      "definition": {
      "type": "record",
      "name": "Message",
      "namespace": "parallelai.sot.avro",
      "fields": [
        {
          "name": "customerRef",
          "type": "string"
        },
        {
          "name": "winnings",
          "type": "string"
        },
        {
          "name": "outComeName",
          "type": "string"
        },
        {
          "name": "marketName",
          "type": "string"
        },
        {
          "name": "eventName",
          "type": "string"
        },
        {
          "name": "categoryRef",
          "type": "string"
        },
        {
          "name": "stateBetsId",
          "type": "string"
        },
        {
          "name": "currency",
          "type": "string"
        },
        {
          "name": "stake",
          "type": "string"
        },
        {
          "name": "message",
          "type": "string"
        },
        {
          "name": "ts",
          "type": "string"
        }
      ],
      "doc": "A basic schema for storing user records"
    }
    }
  ],
  "taps": [
    {
      "type": "pubsub",
      "id": "pubsubsource1",
      "topic": "cdig-prod-bets"
    },
    {
      "type": "pubsub",
      "id": "pubsubsource2",
      "topic": "cdig-prod-winnotice-sf"
    }
  ],
  "steps": [
    {
      "type": "source",
      "id": "in",
      "name": "in",
      "schema": "protoschema1",
      "source": "pubsubsource1"
    },
    {
      "type": "transformation",
      "id": "filter1",
      "name": "filter1",
      "op": "filter",
      "params": [["m => m.get('state).get('bets).apply(0).get('payout).get('winnings).isDefined && m.get('state).get('bets).apply(0).get('payout).get('winnings).get.toDouble > 0.0"]],
      "paramsEncoded": false
    },
    {
      "type": "transformation",
      "id": "filter2",
      "name": "filter2",
      "op": "filter",
      "params": [["m => m.get('state).get('bets).apply(0).get('isSettled).isDefined && m.get('state).get('bets).apply(0).get('isSettled).get == true"]],
      "paramsEncoded": false
    },
    {
      "type": "transformation",
      "id": "mapper1",
      "name": "mapper1",
      "op": "map",
      "params": [["m => {val userid = m.get('state).get('bets).apply(0).get('externalUID).apply(1).get('id);val winnings = Col('state) ->: Col('bets) ->: Col('payout) ->: Col('winnings);val customerRef = Col('state) ->: Col('bets) ->: Col('customerRef);val outComeName = Col('supportingState) ->: Col('outcome) ->: Col('outcomeName) ** Col('outComeName);val marketName = Col('supportingState) ->: Col('outcome) ->: Col('marketName);val eventName = Col('supportingState) ->: Col('outcome) ->: Col('eventName);val catRef = Col('supportingState) ->:  Col('outcome) ->: Col('categoryRef);val stateBetsId = Col('state) ->: Col('bets) ->: Col('id) ** Col('stateBetsId);val currency = Col('state) ->: Col('bets) ->: Col('stake) ->: Col('currencyRef) ** Col('currency);val stake = Col('state) ->: Col('bets) ->: Col('stake) ->: Col('amount) ** Col('stake);val projected = m.project(projector(customerRef, winnings, outComeName, marketName, eventName, catRef, stateBetsId, currency, stake));projected.append('userid, userid)}"]],
      "paramsEncoded": false
    },
    {
      "type": "transformation",
      "id": "filter3",
      "name": "filter3",
      "op": "filter",
      "params": [["m => m.get('winnings).toDouble > 10.0 && m.get('winnings).toDouble > m.get('stake).toDouble * 1.30"]],
      "paramsEncoded": false
    },
    {
      "type": "transformation",
      "id": "mapper2",
      "name": "mapper2",
      "op": "map",
      "params": [["m => {val message = \"Congratulations! You won \" + m.get('winnings) + \" \" + m.get('currency) + \" on a bet placed on \" + m.get('eventName).replaceAll(\"\\\\|\", \"\") + \" for \" + m.get('outComeName).replaceAll(\"\\\\|\", \"\") + \" to \" + m.get('marketName).replaceAll(\"\\\\|\", \"\") + \".\";m.append('message, message).append('ts, Helper.fmt.print(Helper.Instant.now())).remove('userid)}"]],
      "paramsEncoded": false
    },
    {
      "type": "sink",
      "id": "out",
      "name": "out",
      "schema": "avroschema1",
      "source": "pubsubsource2"
    }
  ],
  "dag": [
    {
      "from": "in",
      "to": "filter1"
    },
    {
      "from": "filter1",
      "to": "filter2"
    },
    {
      "from": "filter2",
      "to": "mapper1"
    },
    {
      "from": "mapper1",
      "to": "filter3"
    },
    {
      "from": "filter3",
      "to": "mapper2"
    },
    {
      "from": "mapper2",
      "to": "out"
    }
  ]
}