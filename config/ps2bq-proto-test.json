{
  "name": "schemaname",
  "version": "version1",
  "schemas": [
    {
      "type": "protobuf",
      "id": "protoschema1",
      "version": "version2",
      "definition": {
        "type": "protobufdefinition",
        "name": "Activity",
        "schemaBase64": "",
        "doc": "A basic schema for storing user records"
      }
    }
  ],
  "taps": [
    {
      "type": "pubsub",
      "id": "pubsubsource1",
      "topic": "bets-prod"
    },
    {
      "type": "pubsub",
      "id": "pubsubout1",
      "topic": "p2pout"
    }
  ],
  "steps": [
    {
      "type": "source",
      "name": "in",
      "schema": "protoschema1",
      "source": "pubsubsource1"
    },
    {
      "type": "sink",
      "name": "out",
      "schema": "protoschema1",
      "source": "pubsubout1"
    }
  ],
  "dag": [
    {
      "from": "in",
      "to": "out"
    }
  ]
}